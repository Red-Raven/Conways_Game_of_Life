/**
 * This is an implementation of Comway's Game of Life. It is a computer simulation
 * that runs on a grid of "cells". Each cell can be dead or alive depending on 
 * the number of live cells nearby. Each cell has 8 neighbors (shown bellow in
 * the CHECK ORDER) that affect it.
 * 
 * @author Drew Langston 
 * @version Beta 1 
 * (WOOOO!)
 * 
 * Special thanks to the following redditors who helped with the code: 343346E, Suttonian.
 * Special thanks to the following redditors who helped me understand some things:  yash3ahuja.
 * Neighbor algorithm came from: http://en.wikibooks.org/wiki/Algorithm_Implementation/Simulation/Conway's_Game_of_Life
 */

/*
 * RULES (Just for convenience):
 * 1. Any live cell with fewer than two live neighbours dies, as if caused by under-population.
 * 2. Any live cell with two or three live neighbours lives on to the next generation.
 * 3. Any live cell with more than three live neighbours dies, as if by overcrowding.
 * 4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
 * 
 * CHECK ORDER (neighborCount method):
 * 1 2 3
 * 4 C 5
 * 6 7 8
 */

import java.util.Scanner;
public class Conway3
{
    //Generates a startBoard from user input
    public static String[][] startBoard()
    {
        //Creates the startBoard using user input for length/width.
        Scanner startBoardInfo = new Scanner(System.in);
        System.out.println("Please input a 2 numbers sperarates by a comma like this: 10,11. These will be the hight and width of the grid, respectively.");
        String dimensions = startBoardInfo.nextLine();
        int r = Integer.parseInt( dimensions.substring( 0, dimensions.indexOf( "," ) ) );
        int c = Integer.parseInt( dimensions.substring( dimensions.indexOf( "," ) + 1 ) );

        String[][] startBoard = new String[r][c];

        //fills all elements of startBoard with user inupt.
        //****later, implement format checking****
        System.out.println("Please input " + r + " strings of " + c + " +'s and -'s.");
        for ( int x = 0; x < startBoard.length; x++ )
        {
            String oneRow = startBoardInfo.nextLine();
            for ( int i = 0; i < startBoard[0].length; i++ )
            {
                startBoard[x][i] = oneRow.substring(i, i + 1);
            }
        }
        return startBoard;

    }

    //generates a String[][] whos elements are "-"'s.
    public static String[][] blankBoard(int a, int b)
    {
        String[][] blank = new String[a][b];
        for ( int x = 0; x < blank.length; x++ )
        {
            for ( int i = 0; i < blank[0].length; i++ )
            {
                blank[x][i] = "-";
            }
        }
        return blank;
    }

    //prints all elements of any String[][]
    public static void printBoard(String[][] show)
    {
        for ( int x = 0; x < show.length; x++ )
        {
            for ( int i = 0; i < show[0].length; i++ )
            {
                System.out.print(show[x][i]);
            }
            System.out.println();
        }
    }

    //reports the number of neighbors each conway has.
    //ensures the scan wraps around the edges so edge conways have 8 neighbors and no out of bounds exceptions are thrown.
    public static int neighborCount(String[][] check, int x, int i)
    {
        int c = 0;
        if ( check[ ( ( x - 1 ) % check.length + check.length ) % check.length][ ( ( i - 1 ) % check[0].length + check[0].length ) % check[0].length].equals( "+" ) )
            c++;
        if ( check[ ( ( x - 1 ) % check.length + check.length ) % check.length][i].equals( "+" ) )
            c++;
        if ( check[ ( ( x - 1 ) % check.length + check.length ) % check.length][ ( ( i + 1 ) % check[0].length + check[0].length ) % check[0].length].equals( "+" ) )
            c++;
        if ( check[x][ ( ( i - 1 ) % check.length + check.length ) % check.length].equals( "+" ) )
            c++;
        if ( check[x][ ( ( i + 1 ) % check.length + check.length ) % check.length].equals( "+" ) )
            c++;
        if ( check[ ( ( x + 1 ) % check.length + check.length ) % check.length][ ( ( i - 1 ) % check[0].length + check[0].length ) % check[0].length].equals( "+" ) )
            c++;
        if ( check[ ( ( x + 1 ) % check.length + check.length ) % check.length][i].equals( "+" ) )
            c++;
        if ( check[ ( ( x + 1 ) % check.length + check.length ) % check.length][ ( ( i + 1 ) % check[0].length + check[0].length ) % check[0].length].equals( "+" ) )
            c++;
        return c;
    }

    public static void main(String[] args)
    {
        //sets up variables
        Scanner iterate = new Scanner(System.in);
        String[][] liveBoard = startBoard();
        String[][] nextBoard = blankBoard(liveBoard.length, liveBoard[0].length);
        boolean conwaysAlive = true;

        while (conwaysAlive)
        {
            nextBoard = blankBoard(nextBoard.length, nextBoard[0].length);
            
            //read current values of liveBoard[][], use game rules to assign values of next iteration to nextBoard[][]
            //also checks for any live conways
            conwaysAlive = false;
            for ( int x = 0; x < liveBoard.length; x++ ){
                for ( int i = 0; i < liveBoard[0].length; i++ ){
                    int n = neighborCount( liveBoard, x, i );
                    if ( liveBoard[x][i].equals( "+" ) && ( n == 2 || n == 3 ) )
                    {
                        nextBoard[x][i] = "+";
                        conwaysAlive = true;
                    }
                    else
                    {
                        if ( n == 3 )
                        {
                            nextBoard[x][i] = "+";
                            conwaysAlive = true;
                        }
                    }
                }
            }
            
            //take user user input, clear screen, print liveBoard.
            //the iterate scanner is used here so the next generation has time
            //to load before it is printed.
            liveBoard = nextBoard;

            String step = iterate.nextLine();
            //if ( step.equals( "explain" )
            //if ( step.equals( "rules" )
            //if ( step.equals( "restart" )
            //if ( step.equals( "don't clear" )
            //if ( step.equals( "THE BEAST" )
            //if ( step.equals( "doctor" )
            //if ( step.equals( "grifball" )
            //if ( step.equals( "it's just an object" )
            if ( step.equals( "exit" ) )
            {
                conwaysAlive = false;
            }
            
            System.out.println("\f");
            printBoard(liveBoard);
        }
        System.out.println("All Conways terminated. Please restart program.");
    }
}
