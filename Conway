/**
 * This is an implementation of Comway's Game of Life. It is a computer simulation
 * that runs on a grid of "cells". Each cell can be dead or alive depending on 
 * the number of live cells nearby. Each cell has 8 neighbors (shown bellow in
 * the CHECK ORDER) that affect it.
 * 
 * @author Drew Langston 
 * @version Alpha .1
 * 
 * Special thanks to the following redditors who helped with the code: 343346E, Suttonian.
 * Special thanks to the following redditors who helped me understand some things:  yash3ahuja.
 */

/*
 * RULES (Just for convenience):
 * 1. Any live cell with fewer than two live neighbours dies, as if caused by under-population.
 * 2. Any live cell with two or three live neighbours lives on to the next generation.
 * 3. Any live cell with more than three live neighbours dies, as if by overcrowding.
 * 4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
 * 
 * CHECK ORDER (neighborCount method):
 * 1 2 3
 * 4 C 5
 * 6 7 8
 */

import java.util.Scanner;
public class Conway2
{
    //Generates a startBoard from user input
    public static String[][] startBoard()
    {
        //Creates the startBoard using user input for length/width.
        Scanner startBoardInfo = new Scanner(System.in);
        System.out.println("Please input a 2 numbers sperarates by a comma like this: 10,11. These will be the hight and width of the grid, respectively.");
        String dimensions = startBoardInfo.nextLine();
        int r = Integer.parseInt( dimensions.substring( 0, dimensions.indexOf( "," ) ) );
        int c = Integer.parseInt( dimensions.substring( dimensions.indexOf( "," ) + 1 ) );
        
        String[][] startBoard = new String[r][c];
        
        //fills all elements of startBoard with user inupt.
        //****later, implement format checking****
        System.out.println("Please input " + r + " strings of " + c + " +'s and -'s.");
        for ( int x = 0; x < startBoard.length; x++ )
        {
            String oneRow = startBoardInfo.nextLine();
            for ( int i = 0; i < startBoard[0].length; i++ )
            {
                startBoard[x][i] = oneRow.substring(i, i + 1);
            }
        }
        return startBoard;

    }

    //Sets all elements of any String[][] to "-".
    public static String[][] blankBoard(int a, int b)
    {
        String[][] blank = new String[a][b];
        for ( int x = 0; x < blank.length; x++ )
        {
            for ( int i = 0; i < blank[0].length; i++ )
            {
                blank[x][i] = "-";
            }
        }
        return blank;
    }

    //prints all elements of any String[][]
    public static void printBoard(String[][] show)
    {
        for ( int x = 0; x < show.length; x++ )
        {
            for ( int i = 0; i < show[0].length; i++ )
            {
                System.out.print(show[x][i]);
            }
            System.out.println();
        }
    }

    //reports the number of neighbors each conway has.
    //ensures the scan wraps around the edges so edge conways have 8 neighbors and no out of bounds exceptions are thrown.
    public static int neighborCount(String[][] check, int x, int i)
    {
        int c = 0;
        //checks top left corner conway
        //         if ( x == 0 && i == 0 )
        //         {
        //             if ( check[check.length - 1][check[0].length - 1].equals( "+" ) )
        //                 c++;
        //             if ( check[check.length - 1][0].equals( "+" ) )
        //                 c++;
        //             if ( check[check.length - 1][1].equals( "+" ) )
        //                 c++;
        //             if ( check[0][check[0].length - 1].equals( "+" ) )
        //                 c++;
        //             if ( check[0][1].equals( "+" ) )
        //                 c++;
        //             if ( check[1][check[0].length - 1].equals( "+" ) )
        //                 c++;
        //             if ( check[1][0].equals( "+" ) )
        //                 c++;
        //             if ( check[1][1].equals( "+" ) )
        //                 c++;
        //             return c;
        //         }
        // 
        //         //checks top right corner conway
        //         else if ( x == 0 && i == ( check[0].length - 1 ) )
        //         {
        // 
        //         }
        // 
        //         //checks bottom left corner conway
        //         else if ( x == ( check.length - 1 ) && i == 0 )
        //         {
        // 
        //         }
        // 
        //         //checks bottom right corner conway
        //         else if (x == ( check.length - 1 ) && i == ( check.length - 1 ) )
        //         {
        // 
        //         }
        // 
        //         //checks bottom and top edges
        //         else if ( x == 0 || x == ( check.length - 1 ) )
        //         {
        //             if ( check[check.length][i - 1].equals( "+" ) )
        //                 c++;
        //         }
        // 
        //         //checks left and right edges
        //         else if ( i == 0 || i == ( check[0].length - 1 ) )
        //         {
        // 
        //         }
        // 
        //         //checks all non-edge conways.
        //         else {
        if ( check[x - 1][i - 1].equals( "+" ) )
            c++;
        if ( check[x - 1][i].equals( "+" ) )
            c++;
        if ( check[x - 1][i + 1].equals( "+" ) )
            c++;
        if ( check[x][i - 1].equals( "+" ) )
            c++;
        if ( check[x][i + 1].equals( "+" ) )
            c++;
        if ( check[x + 1][i - 1].equals( "+" ) )
            c++;
        if ( check[x + 1][i].equals( "+" ) )
            c++;
        if ( check[x + 1][i + 1].equals( "+" ) )
            c++;
        return c;
        //         }
        //         return c;

    }

    public static void main(String[] args)
    {
        //sets up variables
        Scanner iterate = new Scanner(System.in);
        String[][] liveBoard = startBoard();
        String[][] nextBoard = blankBoard(liveBoard.length, liveBoard[0].length);
        boolean conwaysAlive = true;

        while ( conwaysAlive == true )
        {
            //read current values of liveBoard[][], use game rules to assign values of next iteration to nextBoard[][]
            //also checks for any live conways
            conwaysAlive = false;
            for ( int x = 1; x < liveBoard.length - 2; x++ ){
                for ( int i = 1; i < liveBoard[0].length - 2; i++ ){
                    int n = neighborCount( liveBoard, x, i );
                    if ( liveBoard[x][i].equals( "+" ) && ( n == 2 || n == 3 ) )
                    {
                        nextBoard[x][i] = "+";
                        conwaysAlive = true;
                    }
                    else
                    {
                        if ( n == 3 )
                        {
                            nextBoard[x][i] = "+";
                            conwaysAlive = true;
                        }
                    }
                }
            }

            //Sets liveBoard equal to nextBoard, prints the liveBoard, blanks the nextBoard.
            String step = iterate.nextLine();
            if ( step.equals( "exit" ) )
            {
                conwaysAlive = false;
            }
            liveBoard = nextBoard;
            printBoard(liveBoard);
            nextBoard = blankBoard(nextBoard.length, nextBoard[0].length);

        }
        System.out.println("All Conways terminated. Please restart program.");
    }
}
